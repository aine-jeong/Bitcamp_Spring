<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- 
		상단에 설정해두면!
		context:annotation-config 태그는 어노테이션과 관련해서 
		
		다음의 BeanPostProcessor를 함께 등록 한다.
		- @Required(RequiedAnnotationBeanPostProcessor)
		- @Autowired(AutowiredAnnotationBeanPostProcessor)
		- @Resource, @PostConstruct, @PreDestory(CommonAnnotationBeanPostProcessor)
		- @Configuration(ConfigurationClassPostProcessor)
		
		////

		자동 빈객체 생성 : <context:component-scan>
		<context:component-scan base-package="com.controller"
		공통빈
		@Controller
		Presentation Layer에서 Contoller를 명시하기 위해서 사용
		
		@Service
		Business Layer에서 Service를 명시하기 위해서 사용
		
		@Repository 
		Persistence Layer에서 DAO를 명시하기 위해서 사용
		
		@Component
		그 외에 자동으로 스캔해서 등록하고 싶은 것들을 위해 사용
	 -->
	<!-- @Autowired 자동 처리를 빈객체 자동 생성 등록 -->
	<context:annotation-config />
	
	
	<!-- 공통 빈 -->
	<!-- Resolver: Dispatcher-servlet이 메소드가 리턴한 view의 이름의 앞뒤에 조합 -->
	<bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>
	
	<!-- TEST_1 -->
	<!-- 매핑단위가 클래스에서 함수로 한단계 내려갔다. -->
	<bean id="helloController" class="com.controller.HelloController"></bean>
	
	<!-- TEST_2 -->
	<!-- 
		하나의 요청 주소로, 전송방식에 따라 화면/서비스(GET/POST) 처리 판단
		id는 없어도 된다 (사용되지 x)
	-->
	<bean id="newArticleController" class="com.controller.NewArticleController"></bean>
	<bean class="com.service.ArticleService" />
	
	<!-- TEST_3 parameter List<OrderItem> -->
	<bean class="com.controller.OrderController" />
	
	<!-- TEST_4 @RquestParam -->
	<bean class="com.controller.SearchController"/>
	
	<!-- TEST_5 @CookieValue -->
	<bean class="com.controller.CookieController"/>
	
	<!-- 
		TEST_6 파일 업로드
		import org.springframework.web.multipart.commons.CommonsMultipartResolver;
		import org.springframework.web.multipart.commons.CommonsMultipartFile;
		
		CommonsMultipartFile 사용해서 업로드 하려면 몇가지 기본 세팅 필요
		
		CommonsMultipartResolver: 업로드한 파일에 대한 정보 관리(크기, 이름, 중복이름정책 등)
		
		파일 처리(의존 객체 필요)
		com.springsource.org.apache.commons.fileupload-1.2.0
		com.springsource.org.apache.commons.io-1.4.0 필요
		(경로: D:\bit2021\Spring\Class_Utils\Framework\spring-framework-3.0.2.RELEASE-dependencies\org.apache.commons\com.springsource.org.apache.commons)
		
	-->
	<!-- 컨트롤러 bean -->
	<bean class="com.controller.ImageController" />
	
	<!-- 파일업로드 보조 (반드시 필요하다) -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10485760"></property> <!-- 약 10MB -->
		<property name="defaultEncoding" value="UTF-8"></property>
	</bean>

</beans> 




