<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:context="http://www.springframework.org/schema/context" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   http://www.springframework.org/schema/beans/spring-beans.xsd
	   http://www.springframework.org/schema/context 
	   http://www.springframework.org/schema/context/spring-context.xsd">
	   
	<!-- 
	java 코드
	MonitorViewer viewer = new MonitorViewer();
	Recorder recorder = new Recorder();
	viewer.setRecorder(recorder); //주입 (injection)
	 -->
	 
	 <!--  
	 1단계: xml
	 <bean id="recorder" class="DI_Annotation_01.Recorder"></bean>
	 <bean id="monitorViewer" class="DI_Annotation_01.MonitorViewer">
	 	<property name="recorder">
	 		<ref bean="recoder"/>
	 	</property>
	 </bean>
	 -->
	 
	 <!-- 
	 @Autowired > Type기반
	 목적 : 의존관계를 자동설정할 때 사용하며 [타입을 이용]하여 의존하는 객체를 삽입해 준다. 
	 그러므로 (IOC Container) 해당 타입의 빈객체가 존재하지 않거나 또는 2개 이상 존재할 경우 
	 스프링은 예외를 발생시키게 된다.
		
	 설정 위치 : 생성자, 필드, 메소드(굳이 setter메소드가 아니여도 된다)
	 
	 @Autowired이 동작되기 위해서는 선행 객체가 필요하다 (IOC안에 생성되어 있어야 함!!)
	  >> new AutowiredAnnotationBeanPostProcessor()    :컨테이너 안에 얘가 되어있어야 한다는 것
	  >> <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"></bean>
	  
	 import org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor;
	 
	 *추가설정 : AutowiredAnnotationBeanPostProcessor 클래스를 빈으로 등록시켜줘야 한다. 
	 
	 
	 ******
	 <property name="recorder">
	 		<ref bean="recoder"/>
	 </property>
	 이부분을 대체하는 어노테이션이 @Autowired 
	 
	 ******	
	 
	 <context:annotation-config />
	 xml 상단에 얘를 쓴다면
	 Annotation 사용에 필요한 모든 클래스를 한번에 빈 객체 생성해서 컨테이너에 올려주겠다.
	 >> 장점: Annotation마다 필요한 객체를 하나하나 생성하지 않아도 된다
	 >> 단점: 사용하지 않는 bean객체도 자동으로 다 등록된다 > 무거워 .... 
	 
	 Spring은 설정 싸움~~~
	 설정이 엄청 많당 ㅠㅡㅠ 잘 배워가기~~
	
	
	## Error
	java.lang.ClassNotFoundException: org.springframework.aop.TargetSource
	>> @Autowired 동작시 내부적으로 AOP 작업 (주관심과 보조관심을 이용한 내부작업)
	
	>>	aop 관련된 jar 파일 넣어야 해 ..
	
	## @Autowired가 정상적으로 동작되지 않는 경우
	1. injection 되는 타입 객체가(bean) IOC 컨테이너에 없는 경우 (exception)
	
	2. IOC 컨테이너 안에 같은 타입의 객체가 여러개 존재하는 경우 (exception)
	   <bean id="a" class="DI_Annotation_01.Recorder"></bean>
	   <bean id="b" class="DI_Annotation_01.Recorder"></bean>
	   <bean id="c" class="DI_Annotation_01.Recorder"></bean>
	   
	2.1 IOC 컨테이너 안에 같은 타입의 객체가 여러개 존재하더라도 ...
	    bean의 id값(객체 이름)이 setter함수의 member field명과 동일하다면 자동 주입 성공한다. 
	
	  -->
	 
	 <!-- 단계별로 진행하기 위해서 all Annotation x -> 섞어서 사용해보쟈 -->
	 
	 
	 <!-- Annotation 사용에 필요한 모든 클래스를 한번에 빈 객체 생성해서 컨테이너에 올려주겠다. -->
	 <context:annotation-config />
	 
	 <bean id="recorder" class="DI_Annotation_01.Recorder"></bean>
	 <bean id="monitorViewer" class="DI_Annotation_01.MonitorViewer"></bean>
	   
	  
</beans>



