<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- 
		//1. 실객체의 주소
		Calc calc = new NewCalc();
		
		//2. 가짜(Proxy)를 생성
		Calc cal = (Calc)Proxy.newProxyInstance(calc.getClass().getClassLoader(), //실 객체의 메타 정보(내부 정보)
								calc.getClass().getInterfaces(), //행위 정보(Interface의 정보)
								new LogPrintHandler(calc)); //보조객체의 정보
	 
	 Spring
	 1. 프록시 객체 생성: org.springframework.aop.framework.ProxyFactoryBean
	 2. bean 객체 생성: LogPrintAroundAdvice
	 3. bean 객체 생성: LogPrintBeforeAdvice
	 4. bean 객체 생성: LogPrintAfterAdvice
	 
	=====================
	 
	 하나의 함수가 동작할 때 여러개의 보조업무 수행 가능(advice)
	 
	 문제점: ADD, MUL, SUB 3개의 함수 모두 보조 업무가 실행된다.
	 JoinPoint > Pointcut 개념을 사용해서 지정한 특정 함수만 제한적으로 보조관심(공통모듈) 적용시키자.
	 
	 
	import org.springframework.aop.support.NameMatchMethodPointcut;
	import org.springframework.aop.support.DefaultPointcutAdvisor;
	
	=====================
	
	>> 주업무의 종류를 하나하나 이름 지정하는 것이 힘들어요
	>> 정규표현식을 통해 구현하기
	
	import org.springframework.aop.support.RegexpMethodPointcutAdvisor;
	 
	 -->
	 
	 <bean id="calc" class="AOP_Basic_Spring_07.NewCalc"></bean>
	 <bean id="logPrintAroundAdvice" class="AOP_Basic_Spring_07.LogPrintAroundAdvice"></bean>
	 <bean id="logPrintBeforeAdvice" class="AOP_Basic_Spring_07.LogPrintBeforeAdvice"></bean>
	 <bean id="logPrintAfterAdvice" class="AOP_Basic_Spring_07.LogPrintAfterAdvice"></bean>
	 
	 <!-- 정규표현식 -->
	 <!-- 1단계 : Spring은 Pointcut이 method다.-->
	 <bean id="regexpMethodPointcutAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
	 	<property name="patterns">
	 		<list>
	 			<value>.*AD.*</value>
	 			<value>.*MU*</value>
	 		</list>
	 	</property>
	 	<property name="advice" ref="logPrintAroundAdvice" />
	 </bean>
	 
	 <!-- 2단계 -->
	 <!-- Spring에서 제공하는 Proxy객체 만들기 -->
	 <bean id="proxy" class="org.springframework.aop.framework.ProxyFactoryBean">
	 	<!-- 행위 정보 -->
	 	<property name="proxyInterfaces">
	 		<list>
	 			<value>AOP_Basic_Spring_07.Calc</value>
	 		</list>
	 	</property>
	 	<!-- 실객체의 주소 -->
	 	<property name="target" ref="calc" />
	 	<!-- 보조프로그래밍(Advice를 가지는 보조업무객체) -->
	 	<!-- value로 Advice의 객체 주소값을 주입받는다 -->
	 	<property name="interceptorNames">
	 		<list>
	 			<!-- <value>logPrintAroundAdvice</value> -->
	 			<!-- <value>logPrintBeforeAdvice</value> -->
	 			<!-- <value>logPrintAfterAdvice</value> -->
	 			<!-- <value>defaultPointcutAdvisor</value> -->
	 			<value>regexpMethodPointcutAdvisor</value>
	 		</list>
	 	</property>
	 </bean>
	 
	 
</beans> 




